# -*- tcl -*-
# # ## ### ##### ######## ############# #####################
##
# Test suite for Tcl/Hwloc binding.
# Bitmap manipulation commands.

# # ## ### ##### ######## ############# #####################
## Requirements

package require Tcl 8.5

if {[catch {package require tcltest 2}]} {
    puts stderr "Skipping tests in [info script].  tcltest 2 required."
    return
}

# # ## ### ##### ######## ############# #####################
##
# Get the functionality under test, directly from the build directory,
# which is the CWD.

load libhwloc1.0.so

# # ## ### ##### ######## ############# #####################

test hwloc-bitmap-1.0 {wrong\#args, missing method} -body {
    hwloc bitmap
} -returnCodes error \
    -result {wrong # args: should be "hwloc bitmap option ?arg? ..."}

test hwloc-bitmap-1.1 {bad method name} -body {
    hwloc bitmap xxx
} -returnCodes error \
    -result {bad option "xxx": must be allbut, and, andnot, clear, clear_range, compare, compare_first, empty, first, from_ulong, full, intersects, is_empty, is_equal, is_full, is_included, is_set, last, next, not, only, or, set, set_range, singlify, to_ulong, weight, or xor}

# # ## ### ##### ######## ############# #####################
## 0-ary operators, constant bitmaps

foreach {n op} {
    0 empty
    1 full
} {
    test hwloc-bitmap-2.$n "constant bitmaps, $op, wrong args" -body {
	hwloc bitmap $op x
    } -returnCodes error \
	-result "wrong # args: should be \"hwloc bitmap $op\""
}

# - -- --- ----- -------- ------------- ---------------------

test hwloc-bitmap-2.2 {constant bitmaps, empty} -body {
    hwloc bitmap empty
} -result {}

test hwloc-bitmap-2.3 {constant bitmaps, full} -body {
    hwloc bitmap full
} -result {0-}

# # ## ### ##### ######## ############# #####################
## unary operators

foreach {n op p} {
    0 from_ulong mask
    1 first      bitmap
    2 is_full    bitmap
    3 is_empty   bitmap
    4 last       bitmap
    5 not        bitmap
    6 singlify   bitmap
    7 to_ulong   bitmap
    8 weight     bitmap
} {
    test hwloc-bitmap-3.$n.0 "unary bitmap operations, $op, wrong args" -body {
	hwloc bitmap $op
    } -returnCodes error \
	-result "wrong # args: should be \"hwloc bitmap $op $p\""

    test hwloc-bitmap-3.$n.1 "unary bitmap operations, $op, wrong args" -body {
	hwloc bitmap $op X Y
    } -returnCodes error \
	-result "wrong # args: should be \"hwloc bitmap $op $p\""

    if {$n} {
	test hwloc-bitmap-3.$n.2 "unary bitmap operations, $op, bad bitmap" -body {
	    hwloc bitmap $op X
	} -returnCodes error \
	    -result {failed to parse cpuset}
    } else {
	test hwloc-bitmap-3.$n.2 "unary bitmap operations, $op, bad integer" -body {
	    hwloc bitmap $op X
	} -returnCodes error \
	    -result {expected integer but got "X"}
    }
}

# - -- --- ----- -------- ------------- ---------------------
# from_ulong, to_ulong (complementary operations)

foreach {n v r} {
    3   0 {}
    4   1 0
    5   2 1
    6   3 0-1
    7   5 0,2
    8   7 0-2
    9  11 0-1,3
    10 13 0,2-3
    11 17 0,4
    12 19 0-1,4
} {
    test hwloc-bitmap-3.0.$n "unary bitmap operations, from_ulong $v" -body {
	hwloc bitmap from_ulong $v
    } -result $r

    test hwloc-bitmap-3.7.$n "unary bitmap operations, to_ulong $r" -body {
	hwloc bitmap to_ulong $r
    } -result $v
}

# - -- --- ----- -------- ------------- ---------------------
# first (bit of the set, errors on empty set).
# singlify - alias of first, in essence, except it doesn't error on
# the empty set.

test hwloc-bitmap-3.1.3 "unary bitmap operations, first (empty)" -body {
    hwloc bitmap first {}
} -returnCodes error -result {hwloc_bitmap_first error}

test hwloc-bitmap-3.6.3 "unary bitmap operations, singlify (empty)" -body {
    hwloc bitmap singlify {}
} -result {}

foreach {n v r} {
    4  0     0
    5  1     1
    6  0-1   0
    7  0,2   0
    8  0-2   0
    9  0-1,3 0
    10 0,2-3 0
    11 0,4   0
    12 0-1,4 0
    13 0-    0
    14 4-    4
} {
    test hwloc-bitmap-3.1.$n "unary bitmap operations, first \"$v\"" -body {
	hwloc bitmap first $v
    } -result $r

    test hwloc-bitmap-3.6.$n "unary bitmap operations, singlify \"$v\"" -body {
	hwloc bitmap singlify $v
    } -result $r
}

# - -- --- ----- -------- ------------- ---------------------
# is_full

foreach {n v r} {
    3  {}    0
    4  0     0
    5  1     0
    6  0-1   0
    7  0,2   0
    8  0-2   0
    9  0-1,3 0
    10 0,2-3 0
    11 0,4   0
    12 0-1,4 0
    13 0-    1
    14 4-    0
} {
    test hwloc-bitmap-3.2.$n "unary bitmap operations, is_full \"$v\"" -body {
	hwloc bitmap is_full $v
    } -result $r
}

# - -- --- ----- -------- ------------- ---------------------
# is_empty

foreach {n v r} {
    3  {}    1
    4  0     0
    5  1     0
    6  0-1   0
    7  0,2   0
    8  0-2   0
    9  0-1,3 0
    10 0,2-3 0
    11 0,4   0
    12 0-1,4 0
    13 0-    0
    14 4-    0
} {
    test hwloc-bitmap-3.2.$n "unary bitmap operations, is_empty \"$v\"" -body {
	hwloc bitmap is_empty $v
    } -result $r
}

# - -- --- ----- -------- ------------- ---------------------
# last (last bit set, errors on empty and infinite sets)

test hwloc-bitmap-3.4.3 "unary bitmap operations, last (empty)" -body {
    hwloc bitmap last {}
} -returnCodes error -result {hwloc_bitmap_last error}

test hwloc-bitmap-3.1.13 "unary bitmap operations, last (infinite set)" -body {
    hwloc bitmap last 0-
} -returnCodes error -result {hwloc_bitmap_last error}

test hwloc-bitmap-3.1.14 "unary bitmap operations, last (infinite set)" -body {
    hwloc bitmap last 4-
} -returnCodes error -result {hwloc_bitmap_last error}

foreach {n v r} {
    4  0     0
    5  1     1
    6  0-1   1
    7  0,2   2
    8  0-2   2
    9  0-1,3 3
    10 0,2-3 3
    11 0,4   4
    12 0-1,4 4
} {
    test hwloc-bitmap-3.4.$n "unary bitmap operations, last \"$v\"" -body {
	hwloc bitmap last $v
    } -result $r
}

# - -- --- ----- -------- ------------- ---------------------
# not (bit inversion, result of finite sets is infinite, and vice versa)

foreach {n v r} {
    3  {}    0-
    4  0     1-
    5  1     0,2-
    6  0-1   2-
    7  0,2   1,3-
    8  0-2   3-
    9  0-1,3 2,4-
    10 0,2-3 1,4-
    11 0,4   1-3,5-
    12 0-1,4 2-3,5-
    13 0-    {}
    14 4-    0-3
} {
    test hwloc-bitmap-3.5.$n.0 "unary bitmap operations, not \"$v\"" -body {
	hwloc bitmap not $v
    } -result $r

    # complementary
    test hwloc-bitmap-3.5.$n.1 "unary bitmap operations, not \"$r\"" -body {
	hwloc bitmap not $r
    } -result $v
}

# - -- --- ----- -------- ------------- ---------------------
# weight (number of bits in set, errors on infinite sets)

test hwloc-bitmap-3.8.13 "unary bitmap operations, weight (infinite set)" -body {
    hwloc bitmap weight 0-
} -returnCodes error -result {hwloc_bitmap_weight error}

test hwloc-bitmap-3.8.14 "unary bitmap operations, weight (infinite set)" -body {
    hwloc bitmap weight 4-
} -returnCodes error -result {hwloc_bitmap_weight error}

foreach {n v r} {
    3  {}    0
    4  0     1
    5  1     1
    6  0-1   2
    7  0,2   2
    8  0-2   3
    9  0-1,3 3
    10 0,2-3 3
    11 0,4   2
    12 0-1,4 3
} {
    test hwloc-bitmap-3.8.$n "unary bitmap operations, weight \"$v\"" -body {
	hwloc bitmap weight $v
    } -result $r
}

# # ## ### ##### ######## ############# #####################
## binary operators.

foreach {n op p} {
    0  allbut        {bitmap id}
    1  clear         {bitmap id}
    2  is_set        {bitmap id}
    3  only          {bitmap id}
    4  set           {bitmap id}
    5  next          {bitmap prev}
    6  is_included   {bitmapA bitmapB}
    7  and           {bitmapA bitmapB}
    8  andnot        {bitmapA bitmapB}
    9  compare       {bitmapA bitmapB}
    10 compare_first {bitmapA bitmapB}
    11 intersects    {bitmapA bitmapB}
    12 is_equal      {bitmapA bitmapB}
    13 or            {bitmapA bitmapB}
    14 xor           {bitmapA bitmapB}
} {
    test hwloc-bitmap-4.$n.0 "biary bitmap operations, $op, wrong args" -body {
	hwloc bitmap $op
    } -returnCodes error \
	-result "wrong # args: should be \"hwloc bitmap $op $p\""

    test hwloc-bitmap-4.$n.1 "biary bitmap operations, $op, wrong args" -body {
	hwloc bitmap $op X
    } -returnCodes error \
	-result "wrong # args: should be \"hwloc bitmap $op $p\""

    test hwloc-bitmap-4.$n.2 "biary bitmap operations, $op, wrong args" -body {
	hwloc bitmap $op X Y Z
    } -returnCodes error \
	-result "wrong # args: should be \"hwloc bitmap $op $p\""

    test hwloc-bitmap-4.$n.3 "binary bitmap operations, $op, bad bitmap" -body {
	hwloc bitmap $op X Y
    } -returnCodes error \
	-result {failed to parse cpuset}

    if {$n > 5} {
	test hwloc-bitmap-4.$n.4 "biary bitmap operations, $op, bad bitmap" -body {
	    hwloc bitmap $op 0- Y
	} -returnCodes error \
	    -result {failed to parse cpuset}

    } else {
	test hwloc-bitmap-4.$n.4 "binary bitmap operations, $op, bad integer" -body {
	    hwloc bitmap $op 0- Y
	} -returnCodes error \
	    -result {expected integer but got "Y"}
    }
}

# # ## ### ##### ######## ############# #####################
## trinary operators

# set_range     BITMAP START_ID END_ID
# clear_range   BITMAP START_ID END_ID

foreach {n op} {
    0 set_range
    1 clear_range
} {
    test hwloc-bitmap-5.$n.0 "trinary bitmap operations, $op, wrong args" -body {
	hwloc bitmap $op
    } -returnCodes error \
	-result "wrong # args: should be \"hwloc bitmap $op bitmap begin end\""

    test hwloc-bitmap-5.$n.1 "trinary bitmap operations, $op, wrong args" -body {
	hwloc bitmap $op X
    } -returnCodes error \
	-result "wrong # args: should be \"hwloc bitmap $op bitmap begin end\""

    test hwloc-bitmap-5.$n.2 "trinary bitmap operations, $op, wrong args" -body {
	hwloc bitmap $op X Y
    } -returnCodes error \
	-result "wrong # args: should be \"hwloc bitmap $op bitmap begin end\""

    test hwloc-bitmap-5.$n.3 "trinary bitmap operations, $op, wrong args" -body {
	hwloc bitmap $op X Y Z W
    } -returnCodes error \
	-result "wrong # args: should be \"hwloc bitmap $op bitmap begin end\""

    test hwloc-bitmap-5.$n.4 "trinary bitmap operations, $op, bad bitmap" -body {
	hwloc bitmap $op X Y Z
    } -returnCodes error \
	-result {failed to parse cpuset}

    test hwloc-bitmap-5.$n.5 "trinary bitmap operations, $op, bad start index" -body {
	hwloc bitmap $op 0- Y Z
    } -returnCodes error \
	-result {expected integer but got "Y"}

    test hwloc-bitmap-5.$n.6 "trinary bitmap operations, $op, bad end index" -body {
	hwloc bitmap $op 0- 5 Z
    } -returnCodes error \
	-result {expected integer but got "Z"}
}

puts @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

set full  [hwloc bitmap full]
set empty [hwloc bitmap empty]

puts "only: [hwloc bitmap only $full 1]"
puts "allbut: [hwloc bitmap allbut $full 1]"

puts "set: [hwloc bitmap set $empty 1]"
puts "set_range: [hwloc bitmap set_range $empty 0 1]"
puts "clear: [hwloc bitmap clear $full 1]"
puts "clear_range: [hwloc bitmap clear_range $full 0 1]"

puts "is_set: [hwloc bitmap is_set $full 0]"

puts "or: [hwloc bitmap or $empty $full]"
puts "and: [hwloc bitmap and $empty $full]"
puts "andnot: [hwloc bitmap andnot $empty $full]"
puts "xor: [hwloc bitmap xor $empty $full]"

puts "intersects: [hwloc bitmap intersects $full 1]"
puts "is_included: [hwloc bitmap is_included $full 1]"
puts "is_included: [hwloc bitmap is_included 1 $full]"
puts "is_equal: [hwloc bitmap is_equal $full 1]"
puts "compare: [hwloc bitmap compare $full 1]"
puts "compare_first: [hwloc bitmap compare_first $full 1]"

puts "next: [hwloc bitmap next $full 1]"

puts @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

# # ## ### ##### ######## ############# #####################
tcltest::cleanupTests
