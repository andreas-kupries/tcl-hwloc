# -*- tcl -*-
# # ## ### ##### ######## ############# #####################
##
# Test suite for Tcl/Hwloc binding.
# Topology API

# # ## ### ##### ######## ############# #####################
## Requirements

package require Tcl 8.5

if {[catch {package require tcltest 2}]} {
    puts stderr "Skipping tests in [info script].  tcltest 2 required."
    return
}

# # ## ### ##### ######## ############# #####################
##
# Get the functionality under test, directly from the build directory,
# which is the CWD.

load libtclhwloc0.1.so

# # ## ### ##### ######## ############# #####################

test hwloc-topology-1.0 {wrong\#args} -setup {
    hwloc create X -set_flags this_system -set_synthetic pu:4
} -body {
    X
} -cleanup {
    X destroy
} -returnCodes error \
    -result {wrong # args: should be "X option ?arg? ..."}

test hwloc-topology-1.1 {bad method} -setup {
    hwloc create X -set_flags this_system -set_synthetic pu:4
} -body {
    X bogus
} -cleanup {
    X destroy
} -returnCodes error \
    -result {bad option "bogus": must be convert, cpubind, cpuset, depth, destroy, export, local, membind, nodeset, object, object_by, root, type, or width}

# # ## ### ##### ######## ############# #####################
## convert  --> convert.test
## cpubind  --> cpubind.test
## cpuset   --> cpu_node_set.test
## destroy  --> create.test
## membind  --> membind.test
## nodeset  --> cpu_node_set.test

# # ## ### ##### ######## ############# #####################
## depth	/
## export	/
## local	/
## object
## object_by
## root
## type
## width

# - -- --- ----- -------- ------------- ---------------------
## depth ?-type type?

test hwloc-topology-2.0 {depth, wrong\#args} -setup {
    hwloc create X -set_flags this_system -set_synthetic pu:4
} -body {
    X depth Z
} -cleanup {
    X destroy
} -returnCodes error \
    -result {wrong # args: should be "X depth ?-type value?"}

test hwloc-topology-2.1 {depth, bad option} -setup {
    hwloc create X -set_flags this_system -set_synthetic pu:4
} -body {
    X depth -foo pu
} -cleanup {
    X destroy
} -returnCodes error \
    -result {wrong # args: should be "X depth ?-type value?"}
# TODO: Better message here

test hwloc-topology-2.2 {depth, overall} -setup {
    hwloc create X -set_flags this_system -set_synthetic pu:4
} -body {
    X depth
} -cleanup {
    X destroy
} -result 2

test hwloc-topology-2.3 {depth, specific type} -setup {
    hwloc create X -set_flags this_system -set_synthetic pu:4
} -body {
    X depth -type pu
} -cleanup {
    X destroy
} -result 1

test hwloc-topology-2.4 {depth, bogus type} -setup {
    hwloc create X -set_flags this_system -set_synthetic pu:4
} -body {
    X depth -type bogus
} -cleanup {
    X destroy
} -returnCodes error \
    -result {unrecognized object type}

test hwloc-topology-2.5 {depth, valid type, not in tree} -setup {
    hwloc create X -set_flags this_system -set_synthetic pu:4
} -body {
    X depth -type cache
} -cleanup {
    X destroy
} -result -1

# - -- --- ----- -------- ------------- ---------------------
## export filename

test hwloc-topology-3.0 {export, wrong\#args} -setup {
    hwloc create X -set_flags this_system -set_synthetic pu:4
} -body {
    X export
} -cleanup {
    X destroy
} -returnCodes error \
    -result {wrong # args: should be "X export filename"}

test hwloc-topology-3.1 {export, wrong\#args} -setup {
    hwloc create X -set_flags this_system -set_synthetic pu:4
} -body {
    X export A B
} -cleanup {
    X destroy
} -returnCodes error \
    -result {wrong # args: should be "X export filename"}

test hwloc-topology-3.2 {export} -setup {
    hwloc create X -set_flags this_system -set_synthetic pu:4
    set path [tcltest::makeFile {} Z]
} -body {
    X export $path
    tcltest::viewFile Z
} -cleanup {
    X destroy
    tcltest::removeFile Z
    unset path
} -result {<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topology SYSTEM "hwloc.dtd">
<topology>
  <object type="Machine" os_level="-1" os_index="0" cpuset="0x0000000f" complete_cpuset="0x0000000f" online_cpuset="0x0000000f" allowed_cpuset="0x0000000f">
    <info name="Backend" value="Synthetic"/>
    <object type="PU" os_level="-1" os_index="0" cpuset="0x00000001" complete_cpuset="0x00000001" online_cpuset="0x00000001" allowed_cpuset="0x00000001"/>
    <object type="PU" os_level="-1" os_index="1" cpuset="0x00000002" complete_cpuset="0x00000002" online_cpuset="0x00000002" allowed_cpuset="0x00000002"/>
    <object type="PU" os_level="-1" os_index="2" cpuset="0x00000004" complete_cpuset="0x00000004" online_cpuset="0x00000004" allowed_cpuset="0x00000004"/>
    <object type="PU" os_level="-1" os_index="3" cpuset="0x00000008" complete_cpuset="0x00000008" online_cpuset="0x00000008" allowed_cpuset="0x00000008"/>
  </object>
</topology>}

# - -- --- ----- -------- ------------- ---------------------
## local

test hwloc-topology-4.0 {local, wrong\#args} -setup {
    hwloc create X -set_flags this_system -set_synthetic pu:4
} -body {
    X local Z
} -cleanup {
    X destroy
} -returnCodes error \
    -result {wrong # args: should be "X local"}

test hwloc-topology-4.1 {local, yes} -setup {
    hwloc create X -set_flags this_system -set_synthetic pu:4
} -body {
    X local
} -cleanup {
    X destroy
} -result 1

test hwloc-topology-4.2 {local, no} -setup {
    hwloc create X -set_synthetic pu:4
} -body {
    X local
} -cleanup {
    X destroy
} -result 0

# # ## ### ##### ######## ############# #####################
tcltest::cleanupTests

puts @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
hwloc create topo0
puts [topo0 type -depth 1]
puts [topo0 root]
puts [set a [topo0 object_by -type socket 0]]
puts "[topo0 object $a depth] [topo0 object $a logical_index]"
puts [set a [topo0 object_by -depth 2 0]]
puts "[topo0 object $a depth] [topo0 object $a logical_index]"
puts [topo0 object $a parent]
puts [topo0 object $a children]
puts [topo0 object $a type]
puts "attributes:[topo0 object $a attributes]"
puts "cpuset:[topo0 object $a cpuset]"
puts "info:[topo0 object $a info]"
puts [topo0 type -depth 0]
topo0 destroy

hwloc create topo1 -ignore_type system -set_flags {whole_system this_system}
rename topo1 {}
